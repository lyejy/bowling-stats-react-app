{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lyeji\\\\Desktop\\\\BOWLING\\\\src\\\\BowlingStats.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport * as XLSX from \"xlsx\";\nimport axios from \"axios\";\nimport './BowlingStats.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BowlingStats = () => {\n  _s();\n  const [rawStats, setRawStats] = useState([]);\n  const [leaderboard, setLeaderboard] = useState([]);\n\n  // Function to fetch the Excel file and process it\n  const fetchData = async () => {\n    try {\n      const response = await axios.get(\"/bowling_weekly_scores.xlsx\", {\n        responseType: \"arraybuffer\"\n      });\n\n      // Read the Excel file\n      const workbook = XLSX.read(response.data, {\n        type: \"array\"\n      });\n\n      // Extract the data from each sheet\n      const rawStatsSheet = workbook.Sheets[\"Raw Stats\"];\n      const leaderboardSheet = workbook.Sheets[\"Leaderboard\"];\n\n      // Convert each sheet to JSON\n      const rawStatsData = XLSX.utils.sheet_to_json(rawStatsSheet, {\n        header: 1\n      });\n      const leaderboardData = XLSX.utils.sheet_to_json(leaderboardSheet, {\n        header: 1\n      });\n\n      // Filter to only display the required portions of the Raw Stats table\n      const filteredRawStats = rawStatsData.filter((row, index) => {\n        return index >= 0 && index <= 4; // Show only rows for Historical Average, High Score, Wins, and HWA (1st)\n      });\n\n      // Filter to remove empty rows from Leaderboard\n      const filteredLeaderboard = leaderboardData.filter((row, index) => {\n        return index >= 0 && index <= 7;\n      });\n      setRawStats(filteredRawStats);\n      setLeaderboard(filteredLeaderboard);\n    } catch (error) {\n      console.error(\"Error fetching data\", error);\n    }\n  };\n\n  // Fetch data on component mount\n  useEffect(() => {\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Bowling Stats\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Raw Stats\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      border: \"1\",\n      cellPadding: \"10\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: rawStats[0] && rawStats[0].map((heading, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: heading\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: rawStats.slice(1).map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: row.map((cell, cellIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: cell\n          }, cellIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 17\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Leaderboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      border: \"1\",\n      cellPadding: \"10\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: leaderboard[0] && leaderboard[0].map((heading, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: heading\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: leaderboard.slice(1).map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: row.map((cell, cellIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: cell\n          }, cellIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 17\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(BowlingStats, \"9ErQWspV//8AXY/1851oKhXA2hs=\");\n_c = BowlingStats;\nexport default BowlingStats;\nvar _c;\n$RefreshReg$(_c, \"BowlingStats\");","map":{"version":3,"names":["React","useState","useEffect","XLSX","axios","jsxDEV","_jsxDEV","BowlingStats","_s","rawStats","setRawStats","leaderboard","setLeaderboard","fetchData","response","get","responseType","workbook","read","data","type","rawStatsSheet","Sheets","leaderboardSheet","rawStatsData","utils","sheet_to_json","header","leaderboardData","filteredRawStats","filter","row","index","filteredLeaderboard","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","border","cellPadding","map","heading","slice","rowIndex","cell","cellIndex","_c","$RefreshReg$"],"sources":["C:/Users/lyeji/Desktop/BOWLING/src/BowlingStats.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport * as XLSX from \"xlsx\";\r\nimport axios from \"axios\";\r\nimport './BowlingStats.css';\r\n\r\nconst BowlingStats = () => {\r\n  const [rawStats, setRawStats] = useState([]);\r\n  const [leaderboard, setLeaderboard] = useState([]);\r\n\r\n  // Function to fetch the Excel file and process it\r\n  const fetchData = async () => {\r\n    try {\r\n      const response = await axios.get(\"/bowling_weekly_scores.xlsx\", {\r\n        responseType: \"arraybuffer\",\r\n      });\r\n\r\n      // Read the Excel file\r\n      const workbook = XLSX.read(response.data, { type: \"array\" });\r\n\r\n      // Extract the data from each sheet\r\n      const rawStatsSheet = workbook.Sheets[\"Raw Stats\"];\r\n      const leaderboardSheet = workbook.Sheets[\"Leaderboard\"];\r\n\r\n      // Convert each sheet to JSON\r\n      const rawStatsData = XLSX.utils.sheet_to_json(rawStatsSheet, { header: 1 });\r\n      const leaderboardData = XLSX.utils.sheet_to_json(leaderboardSheet, { header: 1 });\r\n\r\n      // Filter to only display the required portions of the Raw Stats table\r\n      const filteredRawStats = rawStatsData.filter((row, index) => {\r\n        return index >= 0 && index <= 4; // Show only rows for Historical Average, High Score, Wins, and HWA (1st)\r\n      });\r\n\r\n      // Filter to remove empty rows from Leaderboard\r\n      const filteredLeaderboard = leaderboardData.filter((row, index) => {\r\n        return index >= 0 && index <= 7;\r\n      });\r\n\r\n      setRawStats(filteredRawStats);\r\n      setLeaderboard(filteredLeaderboard);\r\n    } catch (error) {\r\n      console.error(\"Error fetching data\", error);\r\n    }\r\n  };\r\n\r\n  // Fetch data on component mount\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Bowling Stats</h1>\r\n\r\n      {/* First Table: Filtered Raw Stats */}\r\n      <h2>Raw Stats</h2>\r\n      <table border=\"1\" cellPadding=\"10\">\r\n        <thead>\r\n          <tr>\r\n            {rawStats[0] && rawStats[0].map((heading, index) => (\r\n              <th key={index}>{heading}</th>\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {rawStats.slice(1).map((row, rowIndex) => (\r\n            <tr key={rowIndex}>\r\n              {row.map((cell, cellIndex) => (\r\n                <td key={cellIndex}>{cell}</td>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n\r\n      {/* Second Table: Filtered Leaderboard */}\r\n      <h2>Leaderboard</h2>\r\n      <table border=\"1\" cellPadding=\"10\">\r\n        <thead>\r\n          <tr>\r\n            {leaderboard[0] && leaderboard[0].map((heading, index) => (\r\n              <th key={index}>{heading}</th>\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {leaderboard.slice(1).map((row, rowIndex) => (\r\n            <tr key={rowIndex}>\r\n              {row.map((cell, cellIndex) => (\r\n                <td key={cellIndex}>{cell}</td>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BowlingStats;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}