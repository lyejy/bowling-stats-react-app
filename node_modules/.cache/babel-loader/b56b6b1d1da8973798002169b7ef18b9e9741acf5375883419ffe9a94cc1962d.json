{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import*as XLSX from\"xlsx\";import axios from\"axios\";import'./index.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const BowlingStats=()=>{const[rawStats,setRawStats]=useState([]);const[leaderboard,setLeaderboard]=useState([]);// Function to fetch the Excel file and process it\nconst fetchData=async()=>{try{const response=await axios.get(\"/bowling_weekly_scores.xlsx\",{responseType:\"arraybuffer\"});// Read the Excel file\nconst workbook=XLSX.read(response.data,{type:\"array\"});// Extract the data from each sheet\nconst rawStatsSheet=workbook.Sheets[\"Raw Stats\"];const leaderboardSheet=workbook.Sheets[\"Leaderboard\"];// Convert each sheet to JSON\nconst rawStatsData=XLSX.utils.sheet_to_json(rawStatsSheet,{header:1});const leaderboardData=XLSX.utils.sheet_to_json(leaderboardSheet,{header:1});// Filter to only display the required portions of the Raw Stats table\nconst filteredRawStats=rawStatsData.filter((row,index)=>{return index>=0&&index<=4;// Show only rows for Historical Average, High Score, Wins, and HWA (1st)\n});// Filter to remove empty rows from Leaderboard\nconst filteredLeaderboard=leaderboardData.filter((row,index)=>{return index>=0&&index<=7;});setRawStats(filteredRawStats);setLeaderboard(filteredLeaderboard);}catch(error){console.error(\"Error fetching data\",error);}};// Fetch data on component mount\nuseEffect(()=>{fetchData();},[]);return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Bowling Stats\"}),/*#__PURE__*/_jsx(\"h2\",{children:\"Raw Stats\"}),/*#__PURE__*/_jsxs(\"table\",{border:\"1\",cellPadding:\"10\",children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsx(\"tr\",{children:rawStats[0]&&rawStats[0].map((heading,index)=>/*#__PURE__*/_jsx(\"th\",{children:heading},index))})}),/*#__PURE__*/_jsx(\"tbody\",{children:rawStats.slice(1).map((row,rowIndex)=>/*#__PURE__*/_jsx(\"tr\",{children:row.map((cell,cellIndex)=>/*#__PURE__*/_jsx(\"td\",{children:cell},cellIndex))},rowIndex))})]}),/*#__PURE__*/_jsx(\"h2\",{children:\"Leaderboard\"}),/*#__PURE__*/_jsxs(\"table\",{border:\"1\",cellPadding:\"10\",children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsx(\"tr\",{children:leaderboard[0]&&leaderboard[0].map((heading,index)=>/*#__PURE__*/_jsx(\"th\",{children:heading},index))})}),/*#__PURE__*/_jsx(\"tbody\",{children:leaderboard.slice(1).map((row,rowIndex)=>/*#__PURE__*/_jsx(\"tr\",{children:row.map((cell,cellIndex)=>/*#__PURE__*/_jsx(\"td\",{children:cell},cellIndex))},rowIndex))})]})]});};export default BowlingStats;","map":{"version":3,"names":["React","useState","useEffect","XLSX","axios","jsx","_jsx","jsxs","_jsxs","BowlingStats","rawStats","setRawStats","leaderboard","setLeaderboard","fetchData","response","get","responseType","workbook","read","data","type","rawStatsSheet","Sheets","leaderboardSheet","rawStatsData","utils","sheet_to_json","header","leaderboardData","filteredRawStats","filter","row","index","filteredLeaderboard","error","console","children","border","cellPadding","map","heading","slice","rowIndex","cell","cellIndex"],"sources":["C:/Users/lyeji/Desktop/BOWLING/src/BowlingStats.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport * as XLSX from \"xlsx\";\r\nimport axios from \"axios\";\r\nimport './index.css';\r\n\r\nconst BowlingStats = () => {\r\n  const [rawStats, setRawStats] = useState([]);\r\n  const [leaderboard, setLeaderboard] = useState([]);\r\n\r\n  // Function to fetch the Excel file and process it\r\n  const fetchData = async () => {\r\n    try {\r\n      const response = await axios.get(\"/bowling_weekly_scores.xlsx\", {\r\n        responseType: \"arraybuffer\",\r\n      });\r\n\r\n      // Read the Excel file\r\n      const workbook = XLSX.read(response.data, { type: \"array\" });\r\n\r\n      // Extract the data from each sheet\r\n      const rawStatsSheet = workbook.Sheets[\"Raw Stats\"];\r\n      const leaderboardSheet = workbook.Sheets[\"Leaderboard\"];\r\n\r\n      // Convert each sheet to JSON\r\n      const rawStatsData = XLSX.utils.sheet_to_json(rawStatsSheet, { header: 1 });\r\n      const leaderboardData = XLSX.utils.sheet_to_json(leaderboardSheet, { header: 1 });\r\n\r\n      // Filter to only display the required portions of the Raw Stats table\r\n      const filteredRawStats = rawStatsData.filter((row, index) => {\r\n        return index >= 0 && index <= 4; // Show only rows for Historical Average, High Score, Wins, and HWA (1st)\r\n      });\r\n\r\n      // Filter to remove empty rows from Leaderboard\r\n      const filteredLeaderboard = leaderboardData.filter((row, index) => {\r\n        return index >= 0 && index <= 7;\r\n      });\r\n\r\n      setRawStats(filteredRawStats);\r\n      setLeaderboard(filteredLeaderboard);\r\n    } catch (error) {\r\n      console.error(\"Error fetching data\", error);\r\n    }\r\n  };\r\n\r\n  // Fetch data on component mount\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Bowling Stats</h1>\r\n\r\n      {/* First Table: Filtered Raw Stats */}\r\n      <h2>Raw Stats</h2>\r\n      <table border=\"1\" cellPadding=\"10\">\r\n        <thead>\r\n          <tr>\r\n            {rawStats[0] && rawStats[0].map((heading, index) => (\r\n              <th key={index}>{heading}</th>\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {rawStats.slice(1).map((row, rowIndex) => (\r\n            <tr key={rowIndex}>\r\n              {row.map((cell, cellIndex) => (\r\n                <td key={cellIndex}>{cell}</td>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n\r\n      {/* Second Table: Filtered Leaderboard */}\r\n      <h2>Leaderboard</h2>\r\n      <table border=\"1\" cellPadding=\"10\">\r\n        <thead>\r\n          <tr>\r\n            {leaderboard[0] && leaderboard[0].map((heading, index) => (\r\n              <th key={index}>{heading}</th>\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {leaderboard.slice(1).map((row, rowIndex) => (\r\n            <tr key={rowIndex}>\r\n              {row.map((cell, cellIndex) => (\r\n                <td key={cellIndex}>{cell}</td>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BowlingStats;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}