{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lyeji\\\\Desktop\\\\BOWLING\\\\src\\\\BowlingStats.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport * as XLSX from \"xlsx\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BowlingStats = () => {\n  _s();\n  const [data, setData] = useState([]);\n\n  // Function to fetch the Excel file and process it\n  const fetchData = async () => {\n    try {\n      // Fetch the file from the public folder\n      const response = await axios.get(\"/bowling_weekly_scores.xlsx\", {\n        responseType: \"arraybuffer\"\n      });\n\n      // Read the Excel file\n      const workbook = XLSX.read(response.data, {\n        type: \"array\"\n      });\n\n      // Assuming your data is in the first sheet\n      const sheetName = workbook.SheetNames[0];\n      const sheet = workbook.Sheets[sheetName];\n\n      // Convert sheet to JSON\n      const jsonData = XLSX.utils.sheet_to_json(sheet);\n      setData(jsonData);\n    } catch (error) {\n      console.error(\"Error fetching data\", error);\n    }\n  };\n\n  // Fetch data on component mount and set up polling every 60 seconds\n  useEffect(() => {\n    fetchData();\n    const interval = setInterval(fetchData, 60000); // Poll every 60 seconds\n    return () => clearInterval(interval); // Cleanup on unmount\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Bowling Stats\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Raw Stats\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      border: \"1\",\n      cellPadding: \"10\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: rawStats[0] && rawStats[0].map((heading, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: heading\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: rawStats.slice(1).map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: row.map((cell, cellIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: cell\n          }, cellIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 17\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Leaderboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      border: \"1\",\n      cellPadding: \"10\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: leaderboard[0] && leaderboard[0].map((heading, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: heading\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: leaderboard.slice(1).map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: row.map((cell, cellIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: cell\n          }, cellIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 17\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(BowlingStats, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n_c = BowlingStats;\nexport default BowlingStats;\nvar _c;\n$RefreshReg$(_c, \"BowlingStats\");","map":{"version":3,"names":["React","useState","useEffect","XLSX","axios","jsxDEV","_jsxDEV","BowlingStats","_s","data","setData","fetchData","response","get","responseType","workbook","read","type","sheetName","SheetNames","sheet","Sheets","jsonData","utils","sheet_to_json","error","console","interval","setInterval","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","border","cellPadding","rawStats","map","heading","index","slice","row","rowIndex","cell","cellIndex","leaderboard","_c","$RefreshReg$"],"sources":["C:/Users/lyeji/Desktop/BOWLING/src/BowlingStats.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport * as XLSX from \"xlsx\";\r\nimport axios from \"axios\";\r\n\r\nconst BowlingStats = () => {\r\n  const [data, setData] = useState([]);\r\n\r\n  // Function to fetch the Excel file and process it\r\n  const fetchData = async () => {\r\n    try {\r\n      // Fetch the file from the public folder\r\n      const response = await axios.get(\"/bowling_weekly_scores.xlsx\", {\r\n        responseType: \"arraybuffer\",\r\n      });\r\n\r\n      // Read the Excel file\r\n      const workbook = XLSX.read(response.data, { type: \"array\" });\r\n\r\n      // Assuming your data is in the first sheet\r\n      const sheetName = workbook.SheetNames[0];\r\n      const sheet = workbook.Sheets[sheetName];\r\n\r\n      // Convert sheet to JSON\r\n      const jsonData = XLSX.utils.sheet_to_json(sheet);\r\n      setData(jsonData);\r\n    } catch (error) {\r\n      console.error(\"Error fetching data\", error);\r\n    }\r\n  };\r\n\r\n  // Fetch data on component mount and set up polling every 60 seconds\r\n  useEffect(() => {\r\n    fetchData();\r\n    const interval = setInterval(fetchData, 60000); // Poll every 60 seconds\r\n    return () => clearInterval(interval); // Cleanup on unmount\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Bowling Stats</h1>\r\n\r\n      {/* First Table: Raw Stats */}\r\n      <h2>Raw Stats</h2>\r\n      <table border=\"1\" cellPadding=\"10\">\r\n        <thead>\r\n          <tr>\r\n            {rawStats[0] && rawStats[0].map((heading, index) => (\r\n              <th key={index}>{heading}</th>\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {rawStats.slice(1).map((row, rowIndex) => (\r\n            <tr key={rowIndex}>\r\n              {row.map((cell, cellIndex) => (\r\n                <td key={cellIndex}>{cell}</td>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n\r\n      {/* Second Table: Leaderboard */}\r\n      <h2>Leaderboard</h2>\r\n      <table border=\"1\" cellPadding=\"10\">\r\n        <thead>\r\n          <tr>\r\n            {leaderboard[0] && leaderboard[0].map((heading, index) => (\r\n              <th key={index}>{heading}</th>\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {leaderboard.slice(1).map((row, rowIndex) => (\r\n            <tr key={rowIndex}>\r\n              {row.map((cell, cellIndex) => (\r\n                <td key={cellIndex}>{cell}</td>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BowlingStats;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}